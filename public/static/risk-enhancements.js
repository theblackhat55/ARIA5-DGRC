// DMT Risk Assessment System - Enhanced Risk Management Features
// AI Integration, Risk Score Calculation, and Improved Editing

// AI-powered risk assessment functions
async function generateAIRiskAssessment() {
  const titleField = document.getElementById('risk-title');
  const descriptionField = document.getElementById('risk-description');
  const servicesField = document.getElementById('risk-services');
  
  if (!titleField?.value || !descriptionField?.value) {
    showToast('Please provide risk title and description before AI analysis', 'warning');
    return;
  }
  
  const button = event.target;
  const originalText = button.innerHTML;
  button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Analyzing...';
  button.disabled = true;
  
  try {
    const selectedServices = Array.from(servicesField.selectedOptions).map(opt => opt.text).join(', ');
    
    const analysisData = {
      title: titleField.value,
      description: descriptionField.value,
      services: selectedServices,
      threat_source: document.getElementById('risk-threat-source')?.value || ''
    };
    
    const token = localStorage.getItem('dmt_token');
    const response = await axios.post('/api/ai/risk-assessment', analysisData, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    if (response.data.success) {
      const analysis = response.data.analysis;
      
      // Show AI results
      document.getElementById('ai-assessment-results').classList.remove('hidden');
      document.getElementById('ai-probability-suggestion').textContent = `${analysis.probability}/5 - ${getProbabilityLabel(analysis.probability)}`;\n      document.getElementById('ai-impact-suggestion').textContent = `${analysis.impact}/5 - ${getImpactLabel(analysis.impact)}`;\n      document.getElementById('ai-analysis-text').textContent = analysis.reasoning || 'AI analysis completed successfully.';\n      \n      // Store AI suggestions for easy application\n      window.aiSuggestions = {\n        probability: analysis.probability,\n        impact: analysis.impact\n      };\n      \n      showToast('AI risk assessment completed!', 'success');\n    } else {\n      throw new Error(response.data.message || 'AI analysis failed');\n    }\n  } catch (error) {\n    console.error('AI risk assessment error:', error);\n    showToast('AI analysis temporarily unavailable. Please assess manually.', 'info');\n  } finally {\n    button.innerHTML = originalText;\n    button.disabled = false;\n  }\n}\n\nfunction applyAIProbability() {\n  if (window.aiSuggestions?.probability) {\n    document.getElementById('risk-probability').value = window.aiSuggestions.probability;\n    updateRiskScoreCalculation();\n    showToast('AI probability suggestion applied', 'success');\n  }\n}\n\nfunction applyAIImpact() {\n  if (window.aiSuggestions?.impact) {\n    document.getElementById('risk-impact').value = window.aiSuggestions.impact;\n    updateRiskScoreCalculation();\n    showToast('AI impact suggestion applied', 'success');\n  }\n}\n\nfunction getProbabilityLabel(value) {\n  const labels = { 1: 'Very Low', 2: 'Low', 3: 'Medium', 4: 'High', 5: 'Very High' };\n  return labels[value] || 'Unknown';\n}\n\nfunction getImpactLabel(value) {\n  const labels = { 1: 'Very Low', 2: 'Low', 3: 'Medium', 4: 'High', 5: 'Very High' };\n  return labels[value] || 'Unknown';\n}\n\n// Risk score calculation and display\nfunction updateRiskScoreCalculation() {\n  const probabilityField = document.getElementById('risk-probability');\n  const impactField = document.getElementById('risk-impact');\n  const scoreDisplay = document.getElementById('calculated-risk-score');\n  const levelIndicator = document.getElementById('risk-level-indicator');\n  \n  if (!probabilityField || !impactField || !scoreDisplay || !levelIndicator) {\n    return;\n  }\n  \n  const probability = parseInt(probabilityField.value);\n  const impact = parseInt(impactField.value);\n  \n  if (probability && impact) {\n    const riskScore = probability * impact;\n    scoreDisplay.textContent = riskScore;\n    \n    // Update risk level indicator\n    let level, colorClass;\n    if (riskScore >= 20) {\n      level = 'Critical';\n      colorClass = 'bg-red-600 text-white';\n    } else if (riskScore >= 15) {\n      level = 'High';\n      colorClass = 'bg-orange-500 text-white';\n    } else if (riskScore >= 10) {\n      level = 'Medium';\n      colorClass = 'bg-yellow-500 text-white';\n    } else if (riskScore >= 5) {\n      level = 'Low';\n      colorClass = 'bg-green-500 text-white';\n    } else {\n      level = 'Very Low';\n      colorClass = 'bg-gray-500 text-white';\n    }\n    \n    levelIndicator.textContent = `${level} Risk`;\n    levelIndicator.className = `px-4 py-2 rounded-lg text-sm font-medium ${colorClass}`;\n  } else {\n    scoreDisplay.textContent = '-';\n    levelIndicator.textContent = 'Select probability and impact';\n    levelIndicator.className = 'px-4 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-600';\n  }\n}\n\n// Risk scoring guide\nfunction showRiskScoringGuide(type) {\n  const guides = {\n    probability: {\n      title: 'Probability Scoring Guide',\n      content: `\n        <div class=\"space-y-3\">\n          <div class=\"border-l-4 border-red-500 pl-3\">\n            <strong>5 - Very High (76-100%)</strong>\n            <p class=\"text-sm text-gray-600\">Almost certain to occur within the next year</p>\n          </div>\n          <div class=\"border-l-4 border-orange-500 pl-3\">\n            <strong>4 - High (51-75%)</strong>\n            <p class=\"text-sm text-gray-600\">Likely to occur within the next year</p>\n          </div>\n          <div class=\"border-l-4 border-yellow-500 pl-3\">\n            <strong>3 - Medium (26-50%)</strong>\n            <p class=\"text-sm text-gray-600\">Possible to occur within the next year</p>\n          </div>\n          <div class=\"border-l-4 border-blue-500 pl-3\">\n            <strong>2 - Low (6-25%)</strong>\n            <p class=\"text-sm text-gray-600\">Unlikely but possible within the next year</p>\n          </div>\n          <div class=\"border-l-4 border-green-500 pl-3\">\n            <strong>1 - Very Low (0-5%)</strong>\n            <p class=\"text-sm text-gray-600\">Rare occurrence, unlikely within the next year</p>\n          </div>\n        </div>\n      `\n    },\n    impact: {\n      title: 'Impact Scoring Guide',\n      content: `\n        <div class=\"space-y-3\">\n          <div class=\"border-l-4 border-red-500 pl-3\">\n            <strong>5 - Very High (Severe)</strong>\n            <p class=\"text-sm text-gray-600\">Critical business disruption, major financial loss, severe reputation damage</p>\n          </div>\n          <div class=\"border-l-4 border-orange-500 pl-3\">\n            <strong>4 - High (Major)</strong>\n            <p class=\"text-sm text-gray-600\">Significant business impact, substantial financial loss, notable reputation damage</p>\n          </div>\n          <div class=\"border-l-4 border-yellow-500 pl-3\">\n            <strong>3 - Medium (Moderate)</strong>\n            <p class=\"text-sm text-gray-600\">Moderate business disruption, measurable financial impact, some reputation impact</p>\n          </div>\n          <div class=\"border-l-4 border-blue-500 pl-3\">\n            <strong>2 - Low (Minor)</strong>\n            <p class=\"text-sm text-gray-600\">Limited business impact, minor financial loss, minimal reputation impact</p>\n          </div>\n          <div class=\"border-l-4 border-green-500 pl-3\">\n            <strong>1 - Very Low (Minimal)</strong>\n            <p class=\"text-sm text-gray-600\">Negligible business impact, minimal financial loss, no reputation impact</p>\n          </div>\n        </div>\n      `\n    }\n  };\n  \n  const guide = guides[type];\n  if (guide) {\n    showModal(guide.title, guide.content, [\n      { text: 'Close', class: 'btn-secondary', onclick: 'closeUniversalModal()' }\n    ]);\n  }\n}\n\n// Enhanced editRisk function with better error handling\nasync function editRiskEnhanced(id) {\n  console.log('Editing risk with ID:', id);\n  \n  const risk = moduleData.risks?.find(r => r.id === id);\n  if (!risk) {\n    showToast('Risk not found', 'error');\n    return;\n  }\n  \n  const modal = createModal('Edit Risk', getRiskFormHTML(risk));\n  document.body.appendChild(modal);\n  \n  // Populate dropdowns and form data\n  try {\n    await populateRiskFormDropdownsSafe();\n    \n    // Wait for dropdowns to be populated, then populate form\n    setTimeout(() => {\n      populateRiskFormEnhanced(risk);\n      \n      // Add event listeners for risk score calculation\n      const probabilityField = document.getElementById('risk-probability');\n      const impactField = document.getElementById('risk-impact');\n      \n      if (probabilityField) {\n        probabilityField.addEventListener('change', updateRiskScoreCalculation);\n      }\n      if (impactField) {\n        impactField.addEventListener('change', updateRiskScoreCalculation);\n      }\n      \n      // Initial calculation\n      updateRiskScoreCalculation();\n    }, 500);\n    \n  } catch (error) {\n    console.error('Error populating form:', error);\n    showToast('Error loading form data', 'error');\n  }\n  \n  // Handle form submission\n  document.getElementById('risk-form').addEventListener('submit', async (e) => {\n    e.preventDefault();\n    await handleRiskSubmit(id);\n  });\n}\n\n// Enhanced form population with better error handling\nfunction populateRiskFormEnhanced(risk) {\n  console.log('Populating risk form with enhanced data:', risk);\n  \n  // Safely populate each field with existence check\n  const fields = [\n    { id: 'risk-title', value: risk.title || '' },\n    { id: 'risk-category', value: risk.category_id || '' },\n    { id: 'risk-description', value: risk.description || '' },\n    { id: 'risk-organization', value: risk.organization_id || '' },\n    { id: 'risk-owner', value: risk.owner_id || '' },\n    { id: 'risk-probability', value: risk.probability || '' },\n    { id: 'risk-impact', value: risk.impact || '' },\n    { id: 'risk-threat-source', value: risk.threat_source || '' },\n    { id: 'risk-root-cause', value: risk.root_cause || '' },\n    { id: 'risk-potential-impact', value: risk.potential_impact || '' },\n    { id: 'risk-treatment', value: risk.treatment_strategy || '' },\n    { id: 'risk-mitigation', value: risk.mitigation_plan || '' }\n  ];\n  \n  fields.forEach(field => {\n    const element = document.getElementById(field.id);\n    if (element) {\n      element.value = field.value;\n      console.log(`✓ Set ${field.id} to:`, field.value);\n    } else {\n      console.warn(`⚠ Element ${field.id} not found`);\n    }\n  });\n  \n  // Handle date fields\n  const dateFields = [\n    { id: 'risk-identified-date', value: risk.identified_date },\n    { id: 'risk-review-date', value: risk.next_review_date }\n  ];\n  \n  dateFields.forEach(field => {\n    const element = document.getElementById(field.id);\n    if (element && field.value) {\n      element.value = field.value.split('T')[0];\n      console.log(`✓ Set ${field.id} to:`, element.value);\n    }\n  });\n  \n  // Populate services selection\n  if (risk.related_services) {\n    const servicesSelect = document.getElementById('risk-services');\n    if (servicesSelect) {\n      const serviceIds = risk.related_services.split(',');\n      Array.from(servicesSelect.options).forEach(option => {\n        if (serviceIds.includes(option.value)) {\n          option.selected = true;\n        }\n      });\n      console.log('✓ Selected services:', serviceIds);\n    }\n  }\n  \n  // Update risk score calculation\n  updateRiskScoreCalculation();\n}\n\n// Override the original editRisk function\nif (typeof editRisk !== 'undefined') {\n  window.originalEditRisk = editRisk;\n}\nwindow.editRisk = editRiskEnhanced;\n\n// Add event listeners when document is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n  console.log('Risk enhancements loaded');\n});\n\n// Initialize risk form enhancements when risk form is shown\nfunction initializeRiskFormEnhancements() {\n  const probabilityField = document.getElementById('risk-probability');\n  const impactField = document.getElementById('risk-impact');\n  \n  if (probabilityField) {\n    probabilityField.addEventListener('change', updateRiskScoreCalculation);\n  }\n  if (impactField) {\n    impactField.addEventListener('change', updateRiskScoreCalculation);\n  }\n  \n  // Initial calculation\n  updateRiskScoreCalculation();\n}\n\n// Auto-initialize when form elements are available\nconst checkForRiskForm = () => {\n  if (document.getElementById('risk-probability')) {\n    initializeRiskFormEnhancements();\n  } else {\n    setTimeout(checkForRiskForm, 100);\n  }\n};\n\n// Start checking when any modal opens\nconst originalCreateModal = window.createModal;\nif (originalCreateModal) {\n  window.createModal = function(title, content, buttons) {\n    const modal = originalCreateModal(title, content, buttons);\n    if (title.includes('Risk')) {\n      setTimeout(checkForRiskForm, 100);\n    }\n    return modal;\n  };\n}