# Kong Gateway with PostgreSQL - Enterprise Open Source Setup
version: '3.8'

services:
  # PostgreSQL Database for Kong
  kong-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - kong-net
    restart: unless-stopped

  # Kong Database Migration
  kong-migration:
    image: kong:3.6-alpine
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    networks:
      - kong-net
    restart: "no"

  # Kong Gateway
  kong-gateway:
    image: kong:3.6-alpine
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_URL: "http://localhost:8002"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      # Security Headers
      KONG_HEADERS: "Server, X-Kong-Response-Latency"
      # Rate Limiting
      KONG_PLUGINS: "bundled,rate-limiting,jwt,cors,request-transformer,response-transformer"
    ports:
      - "8000:8000"  # Kong Gateway (Proxy)
      - "8001:8001"  # Kong Admin API
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - kong-net
    restart: unless-stopped

  # Kong Manager (Web UI) - Community Edition
  kong-ui:
    image: pantsel/konga:latest
    depends_on:
      kong-gateway:
        condition: service_healthy
    environment:
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
    ports:
      - "8002:1337"  # Kong Admin UI
    networks:
      - kong-net
    restart: unless-stopped

  # Redis for Kong Plugins (Rate Limiting, Caching)
  kong-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - kong_redis:/data
    networks:
      - kong-net
    restart: unless-stopped

  # Your Risk Management Application
  risk-management-app:
    build: 
      context: ../
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - API_GATEWAY_URL=http://kong-gateway:8000
    ports:
      - "3000:3000"
    depends_on:
      kong-gateway:
        condition: service_healthy
    networks:
      - kong-net
    restart: unless-stopped

volumes:
  kong_data:
  kong_redis:

networks:
  kong-net:
    driver: bridge