# DMT Risk Assessment Platform - Complete Production Stack
# Includes Keycloak, PostgreSQL, and DMT Application
version: '3.8'

services:
  # PostgreSQL Database for Keycloak
  postgres:
    image: postgres:15-alpine
    container_name: dmt-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-keycloak_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups
    networks:
      - dmt-network
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: dmt-keycloak
    environment:
      # Database configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-keycloak_secure_password_2024}
      
      # Keycloak admin configuration
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin_secure_password_2024}
      
      # Production settings
      KC_HOSTNAME: ${KC_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT:-8080}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      
      # Security settings
      KC_PROXY: edge
      KC_LOG_LEVEL: INFO
      
    command:
      - start
      - --import-realm
      - --optimized
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import:ro
      - ./keycloak/themes:/opt/keycloak/themes:ro
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dmt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # DMT Risk Assessment Application
  dmt-app:
    build:
      context: .
      dockerfile: Dockerfile.ubuntu
    container_name: dmt-risk-assessment
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Keycloak Configuration
      KEYCLOAK_BASE_URL: http://keycloak:8080
      KEYCLOAK_REALM: dmt-risk-platform
      KEYCLOAK_CLIENT_ID: dmt-webapp
      KEYCLOAK_CLIENT_SECRET: dmt-webapp-secret-key-2024
      REDIRECT_URI: http://localhost:3000/api/auth/callback
      
      # Database Configuration
      DATABASE_URL: /app/database/dmt-production.sqlite
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-dmt-jwt-secret-production-2024}
      SESSION_SECRET: ${SESSION_SECRET:-dmt-session-secret-production-2024}
      
      # Logging
      LOG_LEVEL: info
      
    volumes:
      - dmt_data:/app/database
      - dmt_logs:/app/logs
      - dmt_uploads:/app/uploads
      - dmt_backups:/app/backups
    ports:
      - "3000:3000"
      - "80:80"
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - dmt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: dmt-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
    depends_on:
      - dmt-app
    networks:
      - dmt-network
    restart: unless-stopped
    profiles:
      - with-ssl

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: dmt-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dmt-network
    restart: unless-stopped
    profiles:
      - with-cache

  # Backup Service (Optional)
  backup:
    image: alpine:latest
    container_name: dmt-backup
    volumes:
      - dmt_data:/source/database:ro
      - dmt_backups:/backups
      - ./scripts:/scripts:ro
    environment:
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      RETENTION_DAYS: 30
    command: crond -f
    networks:
      - dmt-network
    restart: unless-stopped
    profiles:
      - with-backup

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local
  dmt_data:
    driver: local
  dmt_logs:
    driver: local
  dmt_uploads:
    driver: local
  dmt_backups:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  dmt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16