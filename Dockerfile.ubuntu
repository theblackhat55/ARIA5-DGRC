# DMT Risk Assessment Platform - Ubuntu Docker Build
# Complete production-ready Dockerfile with all dependencies

FROM ubuntu:22.04

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_ENV=production
ENV TZ=UTC

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Node.js and npm
    curl \
    gnupg \
    lsb-release \
    ca-certificates \
    # Build essentials
    build-essential \
    python3 \
    python3-pip \
    # Database tools
    sqlite3 \
    # Network tools
    netcat \
    wget \
    # Process management
    supervisor \
    # Security tools
    ufw \
    # Utilities
    vim \
    nano \
    htop \
    zip \
    unzip \
    git \
    jq \
    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x LTS
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Install PM2 globally
RUN npm install -g pm2@latest

# Create application user for security
RUN useradd -m -u 1001 -s /bin/bash dmtuser \
    && mkdir -p /app/logs \
    && chown -R dmtuser:dmtuser /app

# Copy Docker-specific package.json for production dependencies
# Note: We use package.docker.json to avoid conflicts with Cloudflare Workers dependencies
COPY --chown=dmtuser:dmtuser package.docker.json ./package.json

# Switch to application user
USER dmtuser

# Install Node.js dependencies 
# Using npm install (not npm ci) because we're using a fresh package.json
# This will generate a new package-lock.json that matches package.docker.json dependencies
RUN npm install --only=production --no-audit --no-fund \
    && npm cache clean --force

# Copy application source code
COPY --chown=dmtuser:dmtuser . .

# Copy environment configuration
COPY --chown=dmtuser:dmtuser .env.docker .env

# Create necessary directories
RUN mkdir -p \
    /app/database \
    /app/logs \
    /app/uploads \
    /app/backups \
    /app/tmp

# Set proper permissions
RUN chmod +x /app/*.sh 2>/dev/null || true

# Switch back to root for system configuration
USER root

# Create supervisor configuration for process management
RUN mkdir -p /etc/supervisor/conf.d
COPY <<EOF /etc/supervisor/conf.d/dmt-app.conf
[supervisord]
nodaemon=true
user=root

[program:dmt-risk-assessment]
command=/usr/bin/npm start
directory=/app
user=dmtuser
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/app.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
environment=NODE_ENV="production",PORT="3000"

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=false
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/nginx.log

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
EOF

# Create startup script
COPY <<'EOF' /app/start.sh
#!/bin/bash
set -e

echo "üöÄ Starting DMT Risk Assessment Platform"
echo "========================================"

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fix directory permissions (handle Docker volume mounts)
log "üîß Fixing directory permissions..."
mkdir -p /app/database /app/logs /app/uploads /app/backups /app/tmp
chown -R dmtuser:dmtuser /app/database /app/logs /app/uploads /app/backups /app/tmp
chmod -R 755 /app/database /app/logs /app/uploads /app/backups /app/tmp

log "‚úÖ Directory permissions fixed"

# Test database directory write permissions
if ! sudo -u dmtuser touch /app/database/.test 2>/dev/null; then
    log "‚ùå Still cannot write to database directory, trying alternative approach..."
    # Try creating with root and then changing ownership
    touch /app/database/.test
    chown dmtuser:dmtuser /app/database/.test
    rm -f /app/database/.test
else
    rm -f /app/database/.test
fi

log "‚úÖ Database directory is writable"

# Initialize database as dmtuser
log "üìä Initializing database..."
su - dmtuser -c "cd /app && node -e \"
const { initializeDatabase } = require('./src/database/sqlite.js');
initializeDatabase().then(() => {
    console.log('‚úÖ Database initialized successfully');
}).catch(err => {
    console.error('‚ùå Database initialization failed:', err);
    process.exit(1);
});
\""

log "‚úÖ Database initialization completed"

# Start application with supervisor
log "üîß Starting application services..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/dmt-app.conf
EOF

RUN chmod +x /app/start.sh

# Install nginx for reverse proxy (optional)
RUN apt-get update && apt-get install -y nginx \
    && rm -rf /var/lib/apt/lists/*

# Create nginx configuration
COPY <<EOF /etc/nginx/sites-available/dmt-app
server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone \$binary_remote_addr zone=login:10m rate=5r/m;
    
    # Main application proxy
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
    }
    
    # API rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Auth endpoints rate limiting
    location /api/auth/ {
        limit_req zone=login burst=10 nodelay;
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Static files caching
    location /static/ {
        proxy_pass http://127.0.0.1:3000;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Health check
    location /health {
        proxy_pass http://127.0.0.1:3000;
        access_log off;
    }
}
EOF

RUN ln -s /etc/nginx/sites-available/dmt-app /etc/nginx/sites-enabled/ \
    && rm -f /etc/nginx/sites-enabled/default

# Health check script
COPY <<'EOF' /app/healthcheck.sh
#!/bin/bash
set -e

# Check if application is responding
if curl -f -s http://localhost:3000/health > /dev/null; then
    echo "‚úÖ Application health check passed"
    exit 0
else
    echo "‚ùå Application health check failed"
    exit 1
fi
EOF

RUN chmod +x /app/healthcheck.sh

# Final setup
RUN chown -R dmtuser:dmtuser /app \
    && chmod -R 755 /app/logs \
    && chmod -R 755 /app/database

# Expose ports
EXPOSE 3000 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Set final working directory
WORKDIR /app

# Default command
CMD ["/app/start.sh"]

# Labels for container metadata
LABEL name="dmt-risk-assessment" \
      version="2.0.1" \
      description="DMT Risk Assessment Platform - Ubuntu Docker Edition" \
      maintainer="DMT Development Team" \
      org.opencontainers.image.title="DMT Risk Assessment Platform" \
      org.opencontainers.image.description="Enterprise GRC Platform with Keycloak Authentication" \
      org.opencontainers.image.version="2.0.1" \
      org.opencontainers.image.vendor="DMT" \
      org.opencontainers.image.licenses="MIT"