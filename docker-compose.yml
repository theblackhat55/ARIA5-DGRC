# GRC 3.1 - Complete Enterprise Stack
# Kong Gateway + Keycloak + Risk Management Platform
# Ubuntu/Docker Production-Ready Setup

version: '3.8'

networks:
  grctier:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  kong_data:
    driver: local
  kong_redis_data:
    driver: local
  keycloak_data:
    driver: local
  postgres_data:
    driver: local
  app_data:
    driver: local

services:
  # PostgreSQL - Shared database for Kong, Keycloak, and Application
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: grctier
      POSTGRES_USER: grctier
      POSTGRES_PASSWORD: grctier_secure_password_2024
      POSTGRES_MULTIPLE_DATABASES: kong,keycloak,riskmanagement
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      grctier:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grctier"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis - For Kong rate limiting and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis_secure_password_2024
    volumes:
      - kong_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      grctier:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kong Database Migration
  kong-migration:
    image: kong:3.9.1-ubuntu
    command: sh -c "sleep 10 && kong migrations bootstrap"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong
      KONG_PG_USER: grctier
      KONG_PG_PASSWORD: grctier_secure_password_2024
      KONG_LOG_LEVEL: debug
    networks:
      - grctier
    restart: "no"

  # Kong Gateway - API Management
  kong:
    image: kong:3.9.1-ubuntu
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong
      KONG_PG_USER: grctier
      KONG_PG_PASSWORD: grctier_secure_password_2024
      
      # Network Configuration
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      
      # Security Configuration
      KONG_REAL_IP_HEADER: X-Forwarded-For
      KONG_TRUSTED_IPS: "0.0.0.0/0,::/0"
      
      # Plugin Configuration
      KONG_PLUGINS: "bundled,cors,jwt,rate-limiting,request-transformer,response-transformer,basic-auth,key-auth,oauth2,acl,file-log,prometheus"
      
      # Performance Tuning
      KONG_WORKER_PROCESSES: "2"
      KONG_WORKER_CONNECTIONS: "1024"
      
      # Debug Configuration
      KONG_LOG_LEVEL: info
      
    ports:
      - "8000:8000"   # Kong Proxy HTTP
      - "8443:8443"   # Kong Proxy HTTPS
      - "8001:8001"   # Kong Admin API
      - "8002:8002"   # Kong Manager
    networks:
      grctier:
        ipv4_address: 172.20.0.20
    volumes:
      - ./kong/kong.conf:/etc/kong/kong.conf:ro
      - ./logs:/var/log/kong
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Keycloak - Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: grctier
      KC_DB_PASSWORD: grctier_secure_password_2024
      
      # Keycloak Configuration
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_secure_password_2024
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      
      # Proxy Configuration for Kong
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      
    command:
      - start-dev
      - --import-realm
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      grctier:
        ipv4_address: 172.20.0.30
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Risk Management Application
  risk-app:
    build:
      context: .
      dockerfile: Dockerfile.kong
      args:
        NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      kong:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      # Application Configuration
      NODE_ENV: production
      PORT: 3000
      
      # Database Configuration
      DATABASE_URL: postgresql://grctier:grctier_secure_password_2024@postgres:5432/riskmanagement
      
      # Kong Integration
      KONG_ADMIN_URL: http://kong:8001
      KONG_PROXY_URL: http://kong:8000
      API_GATEWAY_URL: http://kong:8000
      
      # Keycloak Integration
      KEYCLOAK_BASE_URL: http://keycloak:8080
      KEYCLOAK_REALM: risk-management
      KEYCLOAK_CLIENT_ID: risk-management-client
      KEYCLOAK_CLIENT_SECRET: your-client-secret-here
      
      # Redis Configuration
      REDIS_URL: redis://:redis_secure_password_2024@redis:6379
      
      # Security
      JWT_SECRET: your-jwt-secret-key-change-in-production
      ENCRYPTION_KEY: your-encryption-key-32-chars-long
      
      # Cloudflare (if deploying to Cloudflare later)
      CLOUDFLARE_ACCOUNT_ID: your-account-id
      CLOUDFLARE_API_TOKEN: your-api-token
      
    ports:
      - "3000:3000"
    volumes:
      - app_data:/app/data
      - ./logs:/app/logs
    networks:
      grctier:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      grctier:
        ipv4_address: 172.20.0.50
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_secure_password_2024
    volumes:
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./monitoring/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      grctier:
        ipv4_address: 172.20.0.51
    restart: unless-stopped

  # Nginx - Load Balancer and SSL Termination
  nginx:
    image: nginx:1.24-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    networks:
      grctier:
        ipv4_address: 172.20.0.60
    depends_on:
      - kong
      - keycloak
      - risk-app
    restart: unless-stopped

  # Watchtower - Automatic Updates (Optional)
  watchtower:
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_SCHEDULE: "0 2 * * 0"  # Weekly updates on Sunday 2 AM
    networks:
      - grctier
    restart: unless-stopped